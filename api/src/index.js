import { typeDefs } from "./graphql-schema";
// import { AuthDirective } from 'graphql-directive-auth';
import express from "express";
import bodyParser from "body-parser";
import { ApolloServer } from "apollo-server-express";
import { v1 as neo4j } from "neo4j-driver";
import { makeAugmentedSchema } from "neo4j-graphql-js";
import dotenv from "dotenv";
import AWS from 'aws-sdk';
const cors = require('cors')
AWS.config.update({
  region: 'ap-south-1',

});






// set environment variables from ../.env
dotenv.config();

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */



const schema = makeAugmentedSchema({
  typeDefs,
  config: {
    auth: {
      hasRole: true
    }
  }
});


/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || "bolt://localhost:7687",
  neo4j.auth.basic(
    process.env.NEO4J_USER || "neo4j",
    process.env.NEO4J_PASSWORD || "letmein"
  )
);

const app = express();
app.use(cors());
app.use(bodyParser.json());

const middleware = async (req, res, next) => {
  try {
    const token = req.headers.authorization || req.query.token;
    if (token) {
      var params = {
        AccessToken: token.replace('Bearer ', '')
      };
      var cognitoidentityserviceprovider = new AWS.CognitoIdentityServiceProvider();
      let userResponse = await new Promise((resolve, reject) => {
        cognitoidentityserviceprovider.getUser(params, function (err, data) {
          if (err) {
            reject(err.stack);
          }
          else resolve(data)        // successful response
        })
      });
      if (userResponse) {
        console.log(userResponse);
        next();
      }
    } else {
      res.status(401).send({ message: 'You must supply a JWT for authorization!' });
    }
  } catch (error) {
    console.log(error);
    res.status(401).send({ message: 'You must supply a JWT for authorization!' });
  }
};


app.use("*", middleware);


/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: ({ req }) => {
    return {
      req: req,
      driver
    }
  },
  schema: schema,
  introspection: true, // enables introspection of the schema
  playground: true, // enables the actual playground
});

server.applyMiddleware({ app, path: "/" });
app.listen(process.env.GRAPHQL_LISTEN_PORT, "0.0.0.0");